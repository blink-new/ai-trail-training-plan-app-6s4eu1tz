import { useState, useEffect } from 'react'
import { useParams, Link } from 'react-router-dom'
import { ArrowLeft, Calendar, Target, Clock, User, Download, Edit } from 'lucide-react'
import { Button } from '../components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../components/ui/card'
import { Badge } from '../components/ui/badge'
import { Separator } from '../components/ui/separator'
import { blink } from '../blink/client'

interface TrainingPlan {
  id: string
  title: string
  goal: string
  raceDistance: string
  raceDate: string
  currentFitnessLevel: string
  weeklyMileage: string
  trainingDays: string
  timePerSession: string
  experience: string
  injuries: string
  preferences: string
  aiGeneratedPlan: string
  createdAt: string
  status: string
}

export default function PlanDetailsPage() {
  const { id } = useParams<{ id: string }>()
  const [plan, setPlan] = useState<TrainingPlan | null>(null)
  const [loading, setLoading] = useState(true)

  const loadPlan = async (planId: string) => {
    try {
      const planData = await blink.db.trainingPlans.list({
        where: { id: planId }
      })
      if (planData.length > 0) {
        setPlan(planData[0])
      }
    } catch (error) {
      console.error('Error loading plan:', error)
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    if (id) {
      loadPlan(id)
    }
  }, [id])

  const formatDate = (dateString: string) => {
    if (!dateString) return 'Not set'
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    })
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active':
        return 'bg-primary text-primary-foreground'
      case 'completed':
        return 'bg-green-500 text-white'
      case 'paused':
        return 'bg-yellow-500 text-white'
      default:
        return 'bg-gray-500 text-white'
    }
  }

  const exportPlan = () => {
    if (!plan) return
    
    const content = `${plan.title}
Generated on: ${formatDate(plan.createdAt)}

PLAN DETAILS:
Goal: ${plan.goal.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}
Race Distance: ${plan.raceDistance.replace(/-/g, ' ').toUpperCase()}
Race Date: ${formatDate(plan.raceDate)}
Fitness Level: ${plan.currentFitnessLevel.charAt(0).toUpperCase() + plan.currentFitnessLevel.slice(1)}
Weekly Mileage: ${plan.weeklyMileage}
Training Days: ${plan.trainingDays.replace(/,/g, ', ')}
Time Per Session: ${plan.timePerSession}
Experience: ${plan.experience.replace(/-/g, ' ')}

TRAINING PLAN:
${plan.aiGeneratedPlan}

---
Generated by TrailAI - AI-Powered Trail Training Plans`

    const blob = new Blob([content], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `${plan.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  if (loading) {
    return (
      <div className="min-h-screen py-12 px-4 sm:px-6 lg:px-8">
        <div className="max-w-4xl mx-auto">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>
            <p className="text-muted-foreground">Loading your training plan...</p>
          </div>
        </div>
      </div>
    )
  }

  if (!plan) {
    return (
      <div className="min-h-screen py-12 px-4 sm:px-6 lg:px-8">
        <div className="max-w-4xl mx-auto text-center">
          <h1 className="text-2xl font-bold text-foreground mb-4">Plan Not Found</h1>
          <p className="text-muted-foreground mb-6">
            The training plan you're looking for doesn't exist or you don't have access to it.
          </p>
          <Button asChild>
            <Link to="/plans">
              <ArrowLeft className="mr-2 h-4 w-4" />
              Back to My Plans
            </Link>
          </Button>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="flex items-center gap-4 mb-8">
          <Button variant="ghost" asChild>
            <Link to="/plans">
              <ArrowLeft className="mr-2 h-4 w-4" />
              Back to Plans
            </Link>
          </Button>
        </div>

        {/* Plan Header */}
        <div className="mb-8">
          <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-4">
            <div>
              <h1 className="text-3xl sm:text-4xl font-bold text-foreground mb-2">
                {plan.title}
              </h1>
              <p className="text-muted-foreground">
                Created on {formatDate(plan.createdAt)}
              </p>
            </div>
            <div className="flex items-center gap-3">
              <Badge className={getStatusColor(plan.status)}>
                {plan.status.charAt(0).toUpperCase() + plan.status.slice(1)}
              </Badge>
              <Button variant="outline" onClick={exportPlan}>
                <Download className="mr-2 h-4 w-4" />
                Export
              </Button>
            </div>
          </div>
        </div>

        {/* Plan Overview */}
        <Card className="mb-8">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Target className="h-5 w-5 text-primary" />
              Plan Overview
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-4">
                <div className="flex items-center text-sm">
                  <Target className="mr-3 h-4 w-4 text-muted-foreground" />
                  <span className="font-medium mr-2">Goal:</span>
                  <span>{plan.goal.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}</span>
                </div>
                
                <div className="flex items-center text-sm">
                  <Calendar className="mr-3 h-4 w-4 text-muted-foreground" />
                  <span className="font-medium mr-2">Race Distance:</span>
                  <span>{plan.raceDistance.replace(/-/g, ' ').toUpperCase()}</span>
                </div>
                
                {plan.raceDate && (
                  <div className="flex items-center text-sm">
                    <Calendar className="mr-3 h-4 w-4 text-muted-foreground" />
                    <span className="font-medium mr-2">Race Date:</span>
                    <span>{formatDate(plan.raceDate)}</span>
                  </div>
                )}
                
                <div className="flex items-center text-sm">
                  <User className="mr-3 h-4 w-4 text-muted-foreground" />
                  <span className="font-medium mr-2">Fitness Level:</span>
                  <span>{plan.currentFitnessLevel.charAt(0).toUpperCase() + plan.currentFitnessLevel.slice(1)}</span>
                </div>
              </div>
              
              <div className="space-y-4">
                <div className="flex items-center text-sm">
                  <Clock className="mr-3 h-4 w-4 text-muted-foreground" />
                  <span className="font-medium mr-2">Weekly Mileage:</span>
                  <span>{plan.weeklyMileage}</span>
                </div>
                
                <div className="flex items-center text-sm">
                  <Calendar className="mr-3 h-4 w-4 text-muted-foreground" />
                  <span className="font-medium mr-2">Training Days:</span>
                  <span>{plan.trainingDays.replace(/,/g, ', ')}</span>
                </div>
                
                <div className="flex items-center text-sm">
                  <Clock className="mr-3 h-4 w-4 text-muted-foreground" />
                  <span className="font-medium mr-2">Time Per Session:</span>
                  <span>{plan.timePerSession}</span>
                </div>
                
                <div className="flex items-center text-sm">
                  <User className="mr-3 h-4 w-4 text-muted-foreground" />
                  <span className="font-medium mr-2">Experience:</span>
                  <span>{plan.experience.replace(/-/g, ' ')}</span>
                </div>
              </div>
            </div>
            
            {(plan.injuries || plan.preferences) && (
              <>
                <Separator className="my-6" />
                <div className="space-y-4">
                  {plan.injuries && (
                    <div>
                      <h4 className="font-medium mb-2">Injuries/Limitations:</h4>
                      <p className="text-sm text-muted-foreground">{plan.injuries}</p>
                    </div>
                  )}
                  
                  {plan.preferences && (
                    <div>
                      <h4 className="font-medium mb-2">Additional Preferences:</h4>
                      <p className="text-sm text-muted-foreground">{plan.preferences}</p>
                    </div>
                  )}
                </div>
              </>
            )}
          </CardContent>
        </Card>

        {/* AI Generated Plan */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Edit className="h-5 w-5 text-primary" />
              Your Personalized Training Plan
            </CardTitle>
            <CardDescription>
              AI-generated training plan tailored to your specific goals and requirements.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="prose prose-sm max-w-none">
              <div className="whitespace-pre-wrap text-sm leading-relaxed">
                {plan.aiGeneratedPlan}
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}